{"version":3,"sources":["components/AppBar/components/Back.js","components/AppBar/index.js","components/Icon/index.js","components/Loading/index.js","components/ScrollToTop/index.js","pages/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Back","props","to","className","name","AppBar","back","src","alt","Icon","Loading","color","height","width","type","ScrollToTop","prevProps","this","location","window","scrollTo","Component","withRouter","Home","Loadable","fallback","Welcome","Profile","Projects","App","id","exact","path","component","pages","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sRAeeA,EAXF,SAAAC,GACT,OACI,cAAC,WAAD,UACI,eAAC,IAAD,CAAMC,GAAG,OAAOC,UAAU,eAA1B,UACI,cAAC,EAAD,CAAMC,KAAK,sBAAsBD,UAAU,YAD/C,aCQGE,EAZA,SAAAJ,GAAU,IACfK,EAASL,EAATK,KAEN,OACI,cAAC,WAAD,UACI,wBAAQH,UAAU,UAAlB,SACOG,EAAO,cAAC,EAAD,IAAW,qBAAKC,IAAK,cAAeC,IAAI,WAAWL,UAAU,sBCDxEM,EANF,SAAC,GAA0B,IAAD,IAAxBN,iBAAwB,MAAd,GAAc,EAAVC,EAAU,EAAVA,KAC3B,OACE,mBAAGD,UAAW,QAAUA,EAAxB,SAAoCC,K,iBCezBM,G,MAfC,SAAC,GAA4C,IAAD,IAA1CC,aAA0C,MAApC,UAAoC,MAAzBC,cAAyB,MAAlB,GAAkB,MAAdC,aAAc,MAAR,GAAQ,EAC1D,OACE,qBAAKV,UAAU,UAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,IAAD,CACEW,KAAK,OACLH,MAAOA,EACPC,OAAQA,EACRC,MAAOA,U,uCCTXE,E,iLACeC,GACbC,KAAKhB,MAAMiB,WAAaF,EAAUE,UACpCC,OAAOC,SAAS,EAAG,K,+BAKrB,OAAO,S,GAReC,aAYXC,cAAWP,I,sICXbQ,EAAOC,aAClB,kBAAM,+BACN,CACEC,SAAU,cAAC,IAAD,MAIDC,EAAUF,aACrB,kBAAM,+BACN,CACEC,SAAU,cAAC,IAAD,MAIDE,EAAUH,aACrB,kBAAM,+BACN,CACEC,SAAU,cAAC,IAAD,MAIDG,EAAWJ,aACtB,kBAAM,+BACN,CACEC,SAAU,cAAC,IAAD,MCPCI,MAhBf,WACE,OACE,qBAAKC,GAAG,MAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,WAAWC,UAAWC,IACxC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,WAAWC,UAAWC,IACxC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,YAAYC,UAAWC,a,MCF/BC,QACW,cAA7BhB,OAAOD,SAASkB,UAEe,UAA7BjB,OAAOD,SAASkB,UAEhBjB,OAAOD,SAASkB,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.d8326f21.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport { Icon } from \"components\";\r\n\r\nconst Back = props => {\r\n    return (\r\n        <Fragment>\r\n            <Link to=\"/hub\" className=\"app-bar-back\">\r\n                <Icon name=\"keyboard_arrow_left\" className=\"icon-36\" />\r\n                Back\r\n            </Link>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Back;\r\n","import React, { Fragment } from \"react\";\r\nimport { Back } from \"./components\";\r\n\r\nconst AppBar = props => {\r\n    let { back } = props;\r\n\r\n    return (\r\n        <Fragment>\r\n            <header className=\"app-bar\">\r\n                {!!back ? <Back /> : <img src={\"logo192.png\"} alt=\"app-logo\" className=\"app-bar-logo\" />}\r\n            </header>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AppBar;\r\n","import React from \"react\";\r\n\r\nconst Icon = ({className=\"\", name}) => {\r\n  return (\r\n    <i className={\"icon \" + className}>{name}</i>\r\n  );\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst Loading = ({color=\"#2196F3\", height=40, width=80}) => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <div className=\"loading-inner\">\r\n        <Loader\r\n          type=\"Bars\"\r\n          color={color}\r\n          height={height}\r\n          width={width}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass ScrollToTop extends Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);\r\n","import React from \"react\";\r\nimport Loadable from \"@loadable/component\";\r\nimport { Loading } from \"../components\";\r\n\r\nexport const Home = Loadable(\r\n  () => import(/* webpackChunkName: \"Home\" */ \"./Home\"),\r\n  {\r\n    fallback: <Loading />, // only shown if loading takes more than 250 ms\r\n  }\r\n);\r\n\r\nexport const Welcome = Loadable(\r\n  () => import(/* webpackChunkName: \"Welcome\" */ \"./Welcome\"),\r\n  {\r\n    fallback: <Loading />, // only shown if loading takes more than 250 ms\r\n  }\r\n);\r\n\r\nexport const Profile = Loadable(\r\n  () => import(/* webpackChunkName: \"Profile\" */ \"./Profile\"),\r\n  {\r\n    fallback: <Loading />, // only shown if loading takes more than 250 ms\r\n  }\r\n);\r\n\r\nexport const Projects = Loadable(\r\n  () => import(/* webpackChunkName: \"Projects\" */ \"./Projects\"),\r\n  {\r\n    fallback: <Loading />, // only shown if loading takes more than 250 ms\r\n  }\r\n);\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ScrollToTop, AppBar } from \"components\";\nimport * as pages from \"./pages\";\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <Router>\n        <ScrollToTop />\n        <Switch>\n          <Route exact path=\"/\" component={pages.Home} />\n          <Route exact path=\"/welcome\" component={pages.Welcome} />\n          <Route exact path=\"/profile\" component={pages.Profile} />\n          <Route exact path=\"/projects\" component={pages.Projects} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/index.scss';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}